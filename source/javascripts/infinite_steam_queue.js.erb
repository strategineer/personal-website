let games = new Map();
<% data.steamgames.applist.apps.each do |g| %>
<%= "games.set(\"#{g.appid}\"" + "," + "\`#{g.name.gsub("`", "")}\`);" %>
<% end %>
let gameKeys =[ ...games.keys() ];

function getGameUrlFromKey(key) {
  return `https://store.steampowered.com/app/${key}/`;
}

let gameCounter = 0

ExplorerImp = {
  map: games,
  keys: gameKeys.sort((a, b) => 0.5 - Math.random()),
  count: 5,
  onDefaultActionActivated: async function () {
    await setNextDiscovery();
  },
  onSetDiscovery: async function (discoveries) {
    gameCounter += discoveries.length;
    let gameQueueElement = document.getElementById("explorer-queue-count");
    if(typeof gameQueueElement !== 'undefined' && gameQueueElement !== null) {
      gameQueueElement.innerText = `${gameCounter} / ${ExplorerImp.map.size} games/DLCs/movies/shows seen so far.`;
    }

    let gameListElement = document.getElementById("explorer-game-list");
    gameListElement.innerText = "";
    for (const d of discoveries) {
      let gameNameElement = document.createElement("a");
      gameNameElement.classList.add("display-6");
      gameNameElement.innerText = d.discovery;
      gameNameElement.target = "_blank";
      gameNameElement.href = getGameUrlFromKey(d.key);
      gameListElement.appendChild(gameNameElement);
      gameListElement.appendChild(document.createElement("hr"));
    }
  },
  generateShareData: function (discoveries) {
    gameNames = []
    for (const d of discoveries) {
      gameNames.push(d.discovery);
    }
    return {
      title: "Infinite Steam Queue",
      text: gameNames.join("\n"),
      url: window.location.href
    }
  },
  onClickWord: async function (word) {}
}
