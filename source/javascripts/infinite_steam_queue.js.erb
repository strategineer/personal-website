let games = new Map();
<% data.steamgames.applist.apps.each do |g| %>
<%= "games.set(\"#{g.appid}\"" + "," + "\`#{g.name.gsub("`", "")}\`);" %>
<% end %>
let gameKeys =[ ...games.keys() ];

async function onNavigateToSteam() {
  await new Promise(resolve => setTimeout(resolve, 250));
  await setRandomDiscovery();
}

function getGameUrlFromKey(key) {
  return `https://store.steampowered.com/app/${key}/`;
}

let gameCounter = 0

ExplorerImp = {
  map: games,
  keys: gameKeys,
  currentKey: undefined,
  onSetDiscovery: async function (key, discovery) {
    console.log(`onSetDiscovery: ${key} -> ${discovery}`)
    gameCounter += 1;
    let gameQueueElement = document.getElementById("explorer-queue-count");
    if(typeof gameQueueElement !== 'undefined' && gameQueueElement !== null) {
      gameQueueElement.innerText = `${gameCounter} / ${ExplorerImp.map.size} games/DLCs/movies/shows seen so far.`;
    }
    let gameNameElement = document.getElementById("explorer-game-name");
    if(typeof gameNameElement !== 'undefined' && gameNameElement !== null) {
      gameNameElement.innerText = discovery;
    }
    let gameUrlElement = document.getElementById("explorer-game-url");
    if(typeof gameUrlElement !== 'undefined' && gameUrlElement !== null) {
      const gameUrl = getGameUrlFromKey(key);
      gameUrlElement.href = gameUrl;
      gameUrlElement.innerText = gameUrl;
    }
  },
  generateShareData: function (key) {
    const gameTitle = `Infinite Steam Queue - ${ExplorerImp.map.get(key)}`
    const gameUrl = getGameUrlFromKey(key);
    return {
      title: gameTitle,
      text: gameTitle,
      url: gameUrl
    }
  },
  onClickWord: async function (word) {}
}
