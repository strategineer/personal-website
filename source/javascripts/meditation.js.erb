let meditations = new Map();
<% data.meditations.each_with_index do |g, i| %>
<%= "meditations.set(\"#{g[0, g.index("\n")]}\"" + "," + "\`#{g}\`);" %>
<% end %>
let meditationKeys =[ ...meditations.keys() ];

let currentKey = undefined

window.onload = function () {
  if (performance.navigation.type == performance.navigation.TYPE_RELOAD
  || tryLoadMeditationFromLocationHash()) {
    setRandomMeditation();
  }

  const data = getMeditationDataToShare()
  if (navigator.canShare(data)) {
    const btn = document.querySelector('#explorer-footer-button-share');
    btn.classList.remove("d-none");
  }
};

function tryLoadMeditationFromLocationHash() {
  //console.log(window.location.hash);
  if(window.location.hash) {
    const key = window.location.hash.substring(1)
    //console.log(key);
    if(isValidMeditationKey(key)) {
      //console.log("Setting meditation from hash: " + key)
      setMeditation(key);
      return false;
    }
  }
  return true;
}

function locationHashChanged() {
  //console.log("hash changed event triggered");
  tryLoadMeditationFromLocationHash();
}

window.onhashchange = locationHashChanged;


document.body.onkeyup = function(e){
  if(e.keyCode == 32 // space
    || e.keyCode == 13 // enter
  ){
    setRandomMeditation();
  }
}

function searchForClickedWordInOtherMeditations() {
  s = window.getSelection();
  let range = s.getRangeAt(0);
  let node = s.anchorNode;
  while(range.toString().indexOf(' ') != 0 && range.toString().indexOf('—') != 0) {
    try {
      range.setStart(node,(range.startOffset -1));
    } catch {
      break;
    }
  }
  range.setStart(node, range.startOffset +1);
  do{
    try {
      range.setEnd(node,range.endOffset + 1);
    } catch {
      break;
    }
  } while(range.toString().indexOf(' ') == -1 && range.toString().indexOf('—') == -1 && range.toString().trim() != '');
  const term = range.toString().trim().replace(/^\W/g, '').replace(/\W$/g, '').toLowerCase();
  //console.log(`term: ${term}`)
  setMeditationThroughSearchTerm(term);
}

function isValidMeditationKey(key) {
  return meditations.has(key)
}

function setMeditation(key) {
  if(!isValidMeditationKey(key)) {
    return;
  }
  currentKey = key;
  //console.log("Setting meditation to: " + key)
  let meditation = meditations.get(key)
  let e = document.getElementById("explorer-text")
  if(typeof e !== 'undefined' && e !== null) {
    e.innerText = meditation;
    window.location.hash = key
  }
}

function getAllMeditationKeys(term) {
  let keys = [], i;
  for(i = 0; i < meditations.size; i++) {
    const key = meditationKeys[i]
    if (key == currentKey)
      continue;
    if (meditations.get(key).toLowerCase().includes(term))
      keys.push(key);
  }
  //console.log(`Number of choices: ${keys}`)
  return keys;
}

function setMeditationThroughSearchTerm(term) {
  const key = pickOne(getAllMeditationKeys(term));
  //console.log("Setting meditation through search term: " + meditationKeys)
  setMeditation(key);
}

function setRandomMeditation() {
  const key = pickOne(meditationKeys);
  //console.log("Setting random meditation: " + key)
  setMeditation(key);
}

function getMeditationDataToShare() {
  return {
    title: `Marcus Aurelius's Meditation ${currentKey}`,
    text: meditations.get(currentKey),
    url: window.location.href
  };
}

async function shareMeditation() {
  const data = getMeditationDataToShare()
  if (!navigator.canShare(data)) {
    return;
  }
  try {
    await navigator.share(data);
  } catch(err) {
    return
  }
}

