const MEDITATIONS = [
  <% data.meditations.each_with_index do |g, i| %>
    <%= "\`#{g}\`" %><%= ',' unless i == data.meditations.length-1 %>
  <% end %>
];

const MEDITATIONS_DICT_FROM_INDEX = {
  <% data.meditations.each_with_index do |g, i| %>
    <%= "#{i}" + ":" + "\"#{g[0, g.index("\n")]}\"" %><%= ',' unless i == data.meditations.length-1 %>
  <% end %>
};

const MEDITATIONS_DICT_FROM_NUMBERS = {
  <% data.meditations.each_with_index do |g, i| %>
    <%= "\"#{g[0, g.index("\n")]}\"" + ":" + "#{i}" %><%= ',' unless i == data.meditations.length-1 %>
  <% end %>
};


let currentMeditationIndex = undefined

window.onload = function () {
  if (navigator.canShare) {
    const btn = document.querySelector('#meditation-footer-button-share');
    btn.classList.remove("d-none");
  }
  if (performance.navigation.type == performance.navigation.TYPE_RELOAD
  || tryLoadMeditationFromLocationHash()) {
    setRandomMeditation();
  }
};

function tryLoadMeditationFromLocationHash() {
  //console.log(window.location.hash);
  if(window.location.hash) {
    const meditationIndex = MEDITATIONS_DICT_FROM_NUMBERS[getMeditationNumberString()]
    //console.log(meditationIndex);
    if(isValidMeditationIndex(meditationIndex)) {
      //console.log("Setting meditation from hash: " + meditationIndex)
      setMeditation(meditationIndex);
      return false;
    }
  }
  return true;
}

function locationHashChanged() {
  //console.log("hash changed event triggered");
  tryLoadMeditationFromLocationHash();
}

window.onhashchange = locationHashChanged;


document.body.onkeyup = function(e){
  if(e.keyCode == 32 // space
    || e.keyCode == 13 // enter
  ){
    setRandomMeditation();
  }
}

function searchForClickedWordInOtherMeditations() {
  s = window.getSelection();
  let range = s.getRangeAt(0);
  let node = s.anchorNode;
  while(range.toString().indexOf(' ') != 0 && range.toString().indexOf('—') != 0) {
    try {
      range.setStart(node,(range.startOffset -1));
    } catch {
      break;
    }
  }
  range.setStart(node, range.startOffset +1);
  do{
    try {
      range.setEnd(node,range.endOffset + 1);
    } catch {
      break;
    }
  } while(range.toString().indexOf(' ') == -1 && range.toString().indexOf('—') == -1 && range.toString().trim() != '');
  const term = range.toString().trim().replace(/^\W/g, '').replace(/\W$/g, '').toLowerCase();
  //console.log(`term: ${term}`)
  setMeditationThroughSearchTerm(term);
}

function isValidMeditationIndex(meditationIndex) {
  if(typeof meditationIndex !== 'undefined' && meditationIndex !== null) {
    if(0 <= meditationIndex && meditationIndex < MEDITATIONS.length) {
      return true;
    }
  }
  return false;
}

function setMeditation(meditationIndex) {
  if(!isValidMeditationIndex(meditationIndex)) {
    return;
  }
  currentMeditationIndex = meditationIndex;
  //console.log("Setting meditation to: " + meditationIndex)
  let meditation = MEDITATIONS[meditationIndex]
  let e = document.getElementById("meditation")
  if(typeof e !== 'undefined' && e !== null) {
    e.innerText = meditation;
    window.location.hash = MEDITATIONS_DICT_FROM_INDEX[meditationIndex]
  }
}

function getAllMeditationIndexes(term) {
  let indexes = [], i;
  for(i = 0; i < MEDITATIONS.length; i++) {
    if (i == currentMeditationIndex)
      continue;
    if (MEDITATIONS[i].toLowerCase().includes(term))
      indexes.push(i);
  }
  //console.log(`Number of choices: ${indexes}`)
  return indexes;
}

function setMeditationThroughSearchTerm(term) {
  const meditationIndex = pickOne(getAllMeditationIndexes(term));
  //console.log("Setting meditation through search term: " + meditationIndex)
  setMeditation(meditationIndex);
}

function setRandomMeditation() {
  const meditationIndex = pickIndex(MEDITATIONS);
  //console.log("Setting random meditation: " + meditationIndex)
  setMeditation(meditationIndex);
}

function getMeditationNumberString() {
  return window.location.hash.substring(1);
}

async function shareMeditation() {
  if (!navigator.canShare) {
    return;
  }
  try {
    await navigator.share({
      title: `Marcus Aurelius's Meditation ${getMeditationNumberString()}`,
      text: MEDITATIONS[currentMeditationIndex],
      url: window.location.href
    });
  } catch(err) {
    return
  }
}

